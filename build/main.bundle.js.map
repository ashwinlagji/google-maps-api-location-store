{"version":3,"sources":["webpack:///webpack/bootstrap 57d1d3294c4b4219876c","webpack:///./css/styles.scss","webpack:///./js/index.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AChEA,yC;;;;;;ACAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,2BAA2B,iBAAiB;AAC5C;AACA;AACA,mBAAmB,iBAAiB;AACpC;;;AAGA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA,8BAA8B,mBAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA,6D","file":"main.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 57d1d3294c4b4219876c","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./css/styles.scss\n// module id = 0\n// module chunks = 0","require('../css/styles.scss');\r\nvar random_places = [\r\n        ['PSL Goa', 15.365781, 73.932871]\r\n        , ['PSL Pune', 18.507165, 73.834090]\r\n    ];\r\n\r\nfunction initialize() {\r\n    var center_initial_map = {\r\n        lat: 17.469711\r\n        , lng: 75.467188\r\n    };\r\n    var markers = [];\r\n    var geocoder = new google.maps.Geocoder();\r\n    var map = new google.maps.Map(document.getElementById('map-canvas'), {\r\n        mapTypeId: google.maps.MapTypeId.ROADMAP\r\n        , zoom: 6\r\n        , center: center_initial_map\r\n    });\r\n    // Show initial location at Sydney â€” can be changed to detect user location\r\n    //    var defaultBounds = new google.maps.LatLngBounds(\r\n    //        new google.maps.LatLng(20.724029, 77.899577),\r\n    //        new google.maps.LatLng(20.724029, 77.899577));\r\n    //    map.fitBounds(defaultBounds);\r\n    //getting default location of user\r\n    // Try HTML5 geolocation.\r\n    var infoWindow = new google.maps.InfoWindow({\r\n        map: map\r\n    });\r\n    if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(function (position) {\r\n            var pos = {\r\n                lat: position.coords.latitude\r\n                , lng: position.coords.longitude\r\n            };\r\n            infoWindow.setPosition(pos);\r\n            infoWindow.setContent('Location found.');\r\n            map.setCenter(pos);\r\n        }, function () {\r\n            handleLocationError(true, infoWindow, map.getCenter());\r\n        });\r\n    }\r\n    else {\r\n        // Browser doesn't support Geolocation\r\n        handleLocationError(false, infoWindow, map.getCenter());\r\n    }\r\n\r\n    function handleLocationError(browserHasGeolocation, infoWindow, pos) {\r\n        infoWindow.setPosition(pos);\r\n        infoWindow.setContent(browserHasGeolocation ? 'Error: The Geolocation service failed.' : 'Error: Your browser doesn\\'t support geolocation.');\r\n    }\r\n    //END location of user\r\n    //different types of maps\r\n    function CoordMapType(tileSize) {\r\n        this.tileSize = tileSize;\r\n    }\r\n    CoordMapType.prototype.maxZoom = 19;\r\n    CoordMapType.prototype.name = 'Satelite';\r\n    CoordMapType.prototype.alt = 'satellite view';\r\n    CoordMapType.prototype.getTile = function (coord, zoom, ownerDocument) {\r\n        var div = ownerDocument.createElement('div');\r\n        div.innerHTML = coord;\r\n        div.style.width = this.tileSize.width + 'px';\r\n        div.style.height = this.tileSize.height + 'px';\r\n        div.style.fontSize = '10';\r\n        div.style.borderStyle = 'solid';\r\n        div.style.borderWidth = '1px';\r\n        div.style.borderColor = '#AAAAAA';\r\n        div.style.backgroundColor = '#E5E3DF';\r\n        return div;\r\n    };\r\n    map.addListener('maptypeid_changed', function () {\r\n        var showStreetViewControl = map.getMapTypeId() !== 'coordinate';\r\n        map.setOptions({\r\n            streetViewControl: showStreetViewControl\r\n        });\r\n    });\r\n    // Now attach the coordinate map type to the map's registry.\r\n    map.mapTypes.set('coordinate', new CoordMapType(new google.maps.Size(256, 256)));\r\n    var styles = [{\r\n        featureType: \"all\"\r\n        , elementType: \"labels\"\r\n        , stylers: [\r\n            {\r\n                visibility: \"on\"\r\n            }\r\n        ]\r\n    }];\r\n    map.setOptions({\r\n        styles: styles\r\n    });\r\n    var input = /** @type {HTMLInputElement} */ (document.getElementById('pac-input'));\r\n    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\r\n    var searchBox = new google.maps.places.SearchBox(\r\n        /** @type {HTMLInputElement} */\r\n        (input));\r\n    \r\n    \r\n    /** adding a marker on map on click \r\n    google.maps.event.addListener(map, 'click', function(event) {\r\n        placeMarker(event.latLng);\r\n    });\r\n\r\n    function placeMarker(location) {\r\n        var marker = new google.maps.Marker({\r\n            position: location, \r\n            map: map\r\n        });\r\n    }\r\n       end adding marker on map **/\r\n    \r\n    \r\n    // [START region_getplaces]\r\n    // Listen for the event fired when the user selects an item from the\r\n    // pick list. Retrieve the matching places for that item.\r\n    google.maps.event.addListener(searchBox, 'places_changed', function () {\r\n        var places = searchBox.getPlaces();\r\n        for (var i = 0, marker; marker = markers[i]; i++) {\r\n            marker.setMap(null);\r\n        }\r\n        // For each place, get the icon, place name, and location.\r\n        markers = [];\r\n        var bounds = new google.maps.LatLngBounds();\r\n        for (var i = 0, place; place = places[i]; i++) {\r\n            var image = {\r\n                url: place.icon\r\n                , size: new google.maps.Size(71, 71)\r\n                , origin: new google.maps.Point(0, 0)\r\n                , anchor: new google.maps.Point(17, 34)\r\n                , scaledSize: new google.maps.Size(25, 25)\r\n            };\r\n            // Create a marker for each place.\r\n            var marker = new google.maps.Marker({\r\n                map: map\r\n                , //                icon: image,\r\n                title: place.name\r\n                , position: place.geometry.location\r\n            });\r\n            markers.push(marker);\r\n            bounds.extend(place.geometry.location);\r\n            infoWindow.setPosition(place.geometry.location);\r\n            if (marker.formatted_address) {\r\n                infoWindow.setContent(marker.formatted_address + \"<br>coordinates: \" + marker.getPosition().toUrlValue(6));\r\n            }\r\n            else {\r\n                infoWindow.setContent(place.name + \"<br>coordinates: \" + marker.getPosition().toUrlValue(6));\r\n            }\r\n            infoWindow.open(map, marker);\r\n            map.setCenter(place.geometry.location);\r\n            google.maps.event.addListener(marker, 'click', function () {\r\n                infoWindow.setContent(marker.getTitle() + \"<br>coordinates: \" + marker.getPosition().toUrlValue(6));\r\n                infoWindow.open(map, this);\r\n            });\r\n            if (place.geometry.viewport) {\r\n                map.fitBounds(place.geometry.viewport);\r\n            }\r\n            else {\r\n                map.setCenter(place.geometry.location);\r\n                map.setZoom(5); // Why 17? Because it looks good.\r\n            }\r\n        }\r\n    });\r\n    // [END region_getplaces]\r\n    var place_markers = [];\r\n    // Bias the SearchBox results towards places that are within the bounds of the\r\n    // current map's viewport.\r\n    // Make markers show if they are inside visible bounds\r\n    google.maps.event.addListener(map, 'bounds_changed', function () {\r\n        var bounds = map.getBounds();\r\n        searchBox.setBounds(bounds);\r\n        // Remove out of bounds markers\r\n        for (var k = 0; k < place_markers.length; k++) {\r\n            var one_marker = place_markers[k];\r\n            if (!bounds.contains(one_marker.getPosition())) {\r\n                one_marker.setMap(null);\r\n            }\r\n        }\r\n        // Create markers which should be visible\r\n        for (var i = 0; i < random_places.length; i++) {\r\n            var placeLatLng = random_places[i];\r\n            var myLatLng = new google.maps.LatLng(placeLatLng[1], placeLatLng[2]);\r\n            if (bounds.contains(myLatLng)) {\r\n                var marker = new google.maps.Marker({\r\n                    position: myLatLng\r\n                    , map: map\r\n                    , title: placeLatLng[0]\r\n                , });\r\n                place_markers.push(marker);\r\n                google.maps.event.addListener(marker, 'click', function () {\r\n                    infoWindow.setContent(marker.getTitle() + \"<br>coordinates: \" + marker.getPosition().toUrlValue(6));\r\n                    infoWindow.open(map, this);\r\n                });\r\n            }\r\n        };\r\n        // end places markers\r\n        \r\n        \r\n        \r\n        \r\n        var searchPlaceBasedOnText = function () {\r\n            //Place Details Service\r\n            var infowindow = new google.maps.InfoWindow();\r\n            var service = new google.maps.places.PlacesService(map);\r\n            service.getDetails({\r\n                placeId: 'ChIJN1t_tDeuEmsRUsoyG83frY4'\r\n            }, function (place, status) {\r\n                if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n                    var marker = new google.maps.Marker({\r\n                        map: map\r\n                        , position: place.geometry.location\r\n                    });\r\n                    google.maps.event.addListener(marker, 'click', function () {\r\n                        infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + 'Place ID: ' + place.place_id + '<br>' + place.formatted_address + '</div>');\r\n                        infowindow.open(map, this);\r\n                    });\r\n                }\r\n            });\r\n            //END Place Details Service\r\n        }\r\n    });\r\n}\r\ngoogle.maps.event.addDomListener(window, 'load', initialize);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/index.js\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}